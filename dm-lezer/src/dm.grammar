@top File {
  (
    preprocessor |
    "\n" //Not nl because otherwise we keep consuming eof
  )*
}

@skip {} {
  PpDefine {
    ppDirective<"define"> s* PpIdentifier PpDefineParams? s* ((Statement | Expression) s*)? nl
  }
}

@skip { s }

preprocessor[@isGroup=Preprocessor] {
  PpDefine |
  PpIf |
  PpInclude |
  PpError |
  PpWarn |
  PpUndef |
  PpPragma
}

PpDefineParams {
  "(" PpIdentifier ("," PpIdentifier)* "..."? ")"
}

PpIf {
  (
    ppDirective<"if"> PpExpression |
    ppDirective<"ifdef"> PpIdentifier |
    ppDirective<"ifndef"> PpIdentifier
  ) nl
  ppBlock
  (
    ppDirective<"else"> nl
    ppBlock
  )?
  ppDirective<"endif"> nl
}

PpExpression {
  "(" PpExpression ")" |
  PpIdentifier |
  PpNumberLiteral |
  ppKw<"defined"> "(" PpIdentifier ")" |
  PpExpression !times TimesOp PpExpression |
  PpExpression !plus PlusOp PpExpression |
  PpExpression !rel RelOp PpExpression |
  PpExpression !comp CompOp PpExpression |
  PpExpression !and AndOp PpExpression |
  PpExpression !or OrOp PpExpression |
  !unary UnaryOp PpExpression
}

PpInclude {
  ppDirective<"include"> (PpLibInclude | PpFileInclude) nl
}

PpUndef {
  ppDirective<"undef"> PpIdentifier nl
}

PpPragma {
  ppDirective<"pragma">
  (
    ppKw<"multiple"> |
    ppKw<"ignore"> PpIdentifier |
    ppKw<"warn"> PpIdentifier |
    ppKw<"error"> PpIdentifier |
    ppKw<"push"> |
    ppKw<"pop">
  )
}


@skip {} {
  PpFileInclude { "\"" PpStringContent* ppStringDelim }
  PpLibInclude { "<" PpStringContent* ppStringLibDelimEnd }

  PpError {
    ppDirective<"error"> PpContent
  }
  PpWarn {
    ppDirective<"warn"> PpContent
  }
  PpContent { s (ppContent | ppContentEscape)+ ppContentEnd | nl }
}
@local tokens {
  ppStringDelim { "\"" }
  ppStringLibDelimEnd { ">" }
  @else PpStringContent
}

@local tokens {
  ppContentEnd { nl }
  ppContentEscape { "\\" @whitespace+ }
  @else ppContent
}

ppDirective<name> { "#" Keyword[@name={name}] { name } }
ppKw<name> { @specialize[@name={name}]<PpIdentifier, name> }

StatementBlock {
  (Statement (nl | ";"))+
}
ExpressionBlock {
  Expression nl
}
EmptyBlock {
}
ppBlock {
  StatementBlock | ExpressionBlock | EmptyBlock
}
Statement { "stmt" }
Expression { "expr" }

@precedence {
  Identifier,
  escapedWs,

  unary @right,
  times @left,
  plus @left,
  rel @left,
  comp @left,
  and @left,
  or @left
}

TimesOp[group=operator] {"*" | "/"}
PlusOp[group=operator] {"+" | "-"}
RelOp[group=operator] {">" | ">=" | "<" | "<="}
CompOp[group=operator] {"==" | "!="}
AndOp[group=operator] {"&&"}
OrOp[group=operator] {"||"}
UnaryOp[group=operator] {"!"}


@tokens {
  s { ("\\\n" | " " | "\t" )+ }
  Identifier { ("\\" ![\n] | @asciiLetter | @digit | "_" | "-")+ }
  PpIdentifier { (@asciiLetter | "_")  (@asciiLetter | @digit | "_" | "-")+ }
  nl { "\n" | @eof }
  "!"
  "==" "!=" ">" ">=" "<" "<=" "||" "&&" "*" "/" "+" "-"
  PpNumberLiteral { "-"? @digit+ ("." @digit+)? ("e" @digit+)? }
}
