# Basic
#if DEFINE
expr
#endif
==>
File(
  PpIf(
    if, PpExpression(PpIdentifier),
    ExpressionBlock(
      Expression,
    )
    endif
  )
)

# Else
#if DEFINE
expr
#else
stmt
#endif
==>
File(
  PpIf(
    if, PpExpression(PpIdentifier),
    ExpressionBlock(
      Expression,
    ),
    else,
    StatementBlock(
      Statement,
    ),
    endif
  )
)

# Multiple statements
#if DEFINE
stmt
stmt
#endif
==>
File(
  PpIf(
    if, PpExpression(PpIdentifier),
    StatementBlock(
      Statement,
      Statement,
    ),
    endif
  )
)

# defined()
#if defined (  DEFINE )
stmt
stmt
#endif
==>
File(
  PpIf(
    if,
    PpExpression(defined, PpIdentifier),
    StatementBlock(
      Statement,
      Statement,
    ),
    endif
  )
)

# !defined()
#if ! defined (  DEFINE )
stmt
stmt
#endif
==>
File(
  PpIf(
    if,
    PpExpression(
      UnaryOp("!"),
      PpExpression(defined, PpIdentifier)
    )
    StatementBlock(
      Statement,
      Statement,
    ),
    endif
  )
)

# defined shorthands
#ifdef TEST
stmt
#endif
#ifndef TEST
expr
#endif
==>
File(
  PpIf(
    ifdef,
    PpIdentifier,
    StatementBlock(Statement),
    endif
  ),
  PpIf(
    ifndef,
    PpIdentifier,
    ExpressionBlock(Expression),
    endif
  )
)

# Empty block
#if test
#endif
==>
File(
  PpIf(
    if,
    PpExpression(PpIdentifier),
    EmptyBlock,
    endif
  )
)

# Extra parens
#if (((TEST)))
#endif
==>
File(
  PpIf(
    if,
    PpExpression(PpExpression(PpExpression(PpExpression(PpIdentifier)))),
    EmptyBlock,
    endif
  )
)

# Number literal
#if 1
#endif
==>
File(
  PpIf(
    if,
    PpExpression(PpNumberLiteral),
    EmptyBlock,
    endif
  )
)

# Float literals (what)
#if 1.5e15
#endif
==>
File(
  PpIf(
    if,
    PpExpression(PpNumberLiteral),
    EmptyBlock,
    endif
  )
)

# Complex condition
#if 1.5e12 == TEST != 2 > !0 < 2e2 <= 2 + 2 >= -8/9 || 1*8 - !223 && TRUE
#endif
==>
File(
  PpIf(
    if,
    PpExpression(
      PpExpression(
        PpExpression(
          PpExpression(PpNumberLiteral),
          CompOp("=="),
          PpExpression(PpIdentifier)
        ),
        CompOp("!="),
        PpExpression(
          PpExpression(
            PpExpression(
              PpExpression(
                PpExpression(PpNumberLiteral),
                RelOp(">"),
                PpExpression(UnaryOp("!"), PpExpression(PpNumberLiteral))
              ),
              RelOp("<"),
              PpExpression(PpNumberLiteral)
            ),
            RelOp("<="),
            PpExpression(
              PpExpression(PpNumberLiteral),
              PlusOp("+"),
              PpExpression(PpNumberLiteral)
            )
          ),
          RelOp(">="),
          PpExpression(
            PpExpression(PpNumberLiteral),
            TimesOp("/"),
            PpExpression(PpNumberLiteral)
          )
        )
      ),
      OrOp("||"),
      PpExpression(
        PpExpression(
          PpExpression(
            PpExpression(PpNumberLiteral),
            TimesOp("*"),
            PpExpression(PpNumberLiteral)
          ),
          PlusOp("-"),
          PpExpression(UnaryOp("!"), PpExpression(PpNumberLiteral))
        ),
        AndOp("&&"),
        PpExpression(PpIdentifier)
      )
    ),
    EmptyBlock,
    endif
  )
)
